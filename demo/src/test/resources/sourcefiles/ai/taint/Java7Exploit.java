/* BSD 2-Clause License:
 * Copyright (c) 2009 - 2014
 * Software Technology Group
 * Department of Computer Science
 * Technische Universit√§t Darmstadt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package ai.taint;


import static sun.reflect.misc.ReflectUtil.checkPackageAccess;

@SuppressWarnings("restriction")
public class Java7Exploit {

	// taken from com.sun.beans.finder.ClassFinder

	public static Class<?> java7exploit(String cname) throws ClassNotFoundException {
		try {
			ClassLoader loader = Thread.currentThread().getContextClassLoader();
			if (loader == null) {
				loader = ClassLoader.getSystemClassLoader();
			}
			if (loader != null) {
				return Class.forName(cname, false, loader); // checked
			}

		} catch (ClassNotFoundException exception) {
		} catch (SecurityException exception) {
		}
		return Class.forName(cname); // unchecked
	}

	public static Class<?> java7exploitFixed(String name) throws ClassNotFoundException {
		checkPackageAccess(name); // calls SecurityManager.checkPackageAccess ->
									// AccessControl.checkPermission(Permission)
		try {
			ClassLoader loader = Thread.currentThread().getContextClassLoader();
			if (loader == null) {
				loader = ClassLoader.getSystemClassLoader();
			}
			if (loader != null) {
				return Class.forName(name, false, loader);
			}

		} catch (ClassNotFoundException exception) {
		} catch (SecurityException exception) {
		}
		return Class.forName(name);
	}

	public static Class<?> java7exploitNotFixed(String name, String name2) throws ClassNotFoundException {
		checkPackageAccess(name); // calls SecurityManager.checkPackageAccess ->
									// AccessControl.checkPermission(Permission)
		try {
			ClassLoader loader = Thread.currentThread().getContextClassLoader();
			if (loader == null) {
				loader = ClassLoader.getSystemClassLoader();
			}
			if (loader != null) {
				return Class.forName(name, false, loader);
			}

		} catch (ClassNotFoundException exception) {
		} catch (SecurityException exception) {
		}
		return Class.forName(name2);
	}

}
