/* BSD 2-Clause License:
 * Copyright (c) 2009 - 2014
 * Software Technology Group
 * Department of Computer Science
 * Technische Universit√§t Darmstadt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package ai.domain;

/**
 * A class that does perform a large number of operations related to int values.
 * 
 * @author Michael Eichberg
 */
public class IntegerValuesFrenzy {

    static final int theValue = 42;

    // identity function
    static int id(int i) {
        return i;
    }

    // the return value is either i or j
    static int max(int i, int j) {
        if (i < j)
            return i;
        else
            return j;

    }

    // the return value is at most equal to 5
    static int max5(int i) {
        if (i < 5)
            return i;
        else
            return 5;

    }

    // the return value is at most equal to 5; however, to get this result aliases have to
    // be resolved.
    //
    // Code as generated by Eclipse 4.2.1
    // static int aliasingMax5(int i);
    // 0 iload_0 [i]
    // 1 istore_1 [j]
    // 2 iload_1 [j]
    // 3 iconst_5
    // 4 if_icmpge 9
    // 7 iload_0 [i]
    // 8 ireturn
    // 9 iconst_5
    // 10 ireturn
    //
    static int aliasingMax5(int i) {
        int j = i;
        if (j < 5)
            return i;
        else
            return 5;
    }

    static int aliasingMax6(int i) {
        int j = i;
        if (j <= 5)
            return i;
        else
            return 6;
    }

    static int aliasingMinM1(int i) {
        int j = i;
        if (j >= 0)
            return j;
        else
            return -1;
    }

    static int aliasingMin0(int i) {
        int j = i;
        if (j > 0)
            return i;
        else
            return 0;
    }

    static int someSwitch(int i) {
        int j;
        switch (i) {
        case 0:
            j = 0;
            break;
        case 1:
            j = 2;
            break;
        case 2:
            j = 4;
            break;
        default:
            throw new UnknownError();
        }

        return j * i; // j is in the range 0..4 and i in the range 0..2 => result is in
                      // the range [0..8]
    }

    static int someComparisonThatReturns5(int i, int j) {
        if (i == 5 && i == j)
            return j; // returns 5
        else if (j == i && j < 5 && i > 4)
            return -1; // unreachable code
        else
            return 5;
    }

    static int[] array10() {
        int[] is = new int[10]; 
        for(int i = 0; i <= 10; i++ ) { // DELIBERATE INDEX OUT OF BOUNDS
            is[i] = i;
        }
        return is;
    }
}
