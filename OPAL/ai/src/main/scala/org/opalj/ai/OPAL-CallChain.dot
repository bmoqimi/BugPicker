# Interpreter Loop

digraph OPAL {
	compound=true;
	fontname=Helvetica;
	dpi=50;
	//node [shape=circle];
	node [fontname=Helvetica,shape=plaintext,margin="0.05,0.05",height=0];
	edge [fontname=Helvetica];

	label = "The Abstract Interpreter's Control Flow";
	labeljust = l;
	labelloc = "t";

	apply -> performCMD [lhead=cluster_performCMD];

	subgraph cluster_performCMD {
		label="perform(ClassFile,Method,Domain)";
		labeljust=l;
		performCMD [label=""];

		performCMD ->	initialOperands;
		performCMD -> initialLocals;
	}

	performCMD -> performCD [ltail=cluster_performCMD];
	performCD [label="perform(Code,Domain)(Operands,Locals)"]

	performCD -> continueInterpretation -> isAI;

	subgraph cluster_continueInterpreation {
		label = "continueInterpretation";
		labeljust = l;
		continueInterpretation [label=""]



		subgraph cluster_preInterpretationInitialization {
			label="preInterpretationInitialization";
			labeljust=l;
			preInterpretationInitialization [label=""];

			isAI -> setAI [label="t"];
			setAI -> isCodeStructure;
			isAI -> isCodeStructure [label="f"];
			isCodeStructure -> setCodeStructure  [label="t"];
			setCodeStructure -> isMemoryLayout;
			isCodeStructure -> isMemoryLayout  [label="f"];
			isMemoryLayout -> setMemoryLayout [label="t"];

			{ rank=same; isAI; setAI	}
			{ rank=same; isCodeStructure; setCodeStructure	}
			{ rank=same; isMemoryLayout; setMemoryLayout	}

			isAI [label="domain.isInstanceOf\n[TheAI]",style="italic"];
			isCodeStructure [label="domain.isInstanceOf\n[TheCodeStructure]"];
			isMemoryLayout [label="domain.isInstanceOf\n[TheMemoryLayout]"];
			setAI [label="domain.setAI(this)"];
			setCodeStructure [label="domain.setCodeStructure(...)"];
			setMemoryLayout [label="domain.setMemoryLayout(...)"];
		}
	}

 }
